plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.openapi.generator" version '7.7.0'
}

ext{
}

group = 'com.org'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}



repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

//	Swagger 3
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'net.logstash.logback:logstash-logback-encoder:7.0'

	// OpenAPI
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('deleteExtraGeneratedDirectories', Delete) {
	delete ".openapi-generator"
	// anything else for clean-up
}

//We could provide just the directory, fetch the .yaml files and iterate over them
String[] specifications = [
		"main_service_v1",
		"user_service_v2"
]

void createOpenApiGenerateTask(String yamlSpec) {
	String taskName = "openApiGenerate_" + yamlSpec;
	task(taskName, type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
		inputSpec.set("$rootDir/specs/${yamlSpec}.yaml".toString())
		outputDir.set("$buildDir/generated/openapi/${yamlSpec}")
		ignoreFileOverride.set("$rootDir/.openapi-generator-ignore")
		invokerPackage.set("com.org.${yamlSpec}") // Could extract as constant
		packageName.set("com.org.${yamlSpec}")
		modelPackage.set("com.org.${yamlSpec}.model")
		apiPackage.set("com.org.${yamlSpec}.api")
		modelNameSuffix.set('')
		validateSpec.set(true)

		// spring, java, etc -> This is what we actually generate from the provided spec. No reason not to use the same language as the project
		generatorName.set('java') // spring, java, etc
		// TODO: use yaml configuration file to set configOptions
		configOptions.set([
				dateLibrary: "java8",
				generateBuilders: "true",
				generateClientAsBean: "true",
				library: "restclient", // spring-boot, restclient,
				useRuntimeException: "true",
				userBeanValidation: "true",
		])

//		generatorName.set('spring') // spring, java, etc
//		configOptions.set([
//				title: "${yamlSpec}",
//				useJakartaEe: "true",
//				dateLibrary: "java8",
//				generateBuilders: "true",
//				library: "spring-boot", // spring-boot, spring-http-interface,
//				useRuntimeException: "true",
//				userBeanValidation: "true",
//				interfaceOnly: "true", // for spring
//		])
	}
	tasks.deleteExtraGeneratedDirectories{
		dependsOn(taskName)
	}
}

for (String yamlSpec : specifications) {
	createOpenApiGenerateTask(yamlSpec);
}

// Making generated source visible (classpath)
sourceSets {
	main {
		java {
			srcDir("${buildDir}/generated/openapi/main_service_v1/src/main/java")
			srcDir("${buildDir}/generated/openapi/user_service_v2/src/main/java")
			srcDir("${buildDir}/generated/openapi/src/main/java")
		}
	}
}
// TODO: Need to create constants / variables for the generated source directories

tasks.compileJava{
	dependsOn(tasks.deleteExtraGeneratedDirectories)
}