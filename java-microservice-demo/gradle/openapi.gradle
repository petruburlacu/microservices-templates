import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
  repositories {
    mavenCentral()
  }
}
apply plugin: "org.openapi.generator"

/**
 * We can fetch from remote or local file
 * remote: remoteInputSpec.set('http://some-service.net/v3/api-docs')
 *
 * Probably better to pull only required specs and then do the generation
 * @param ymlName
 */
void createOpenApiGenerateTask(String ymlName) {
  String taskName = "openApiGenerate_" + ymlName;
  tasks.register('taskName', GenerateTask) {
    inputSpec.set("$rootDir/specs/${ymlName}.yml".toString())
    ignoreFileOverride.set(".openapi-generator-ignore")
    invokerPackage.set('com.org')
    modelPackage.set('com.org.model')
    apiPackage.set('com.org.api')
    generatorName.set('java') // spring, java, etc
    configOptions.set([
        dateLibrary         : "java8",
        generateBuilders    : "true",
        generateClientAsBean: "true",
        library             : "restclient", // spring-boot, restclient,
        useRuntimeException : "true",
    ])
  }
  compileJava.dependsOn(taskName)

}

String[] ymlNames = [
    "api1",
    "api2"
]
for (String ymlName : ymlNames) {
  createOpenApiGenerateTask(ymlName);
}

sourceSets {
  main {
    java {
      srcDir file("${project.buildDir.path}/generated-resources/src/main/java")
    }
  }
}